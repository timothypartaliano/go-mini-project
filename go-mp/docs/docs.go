// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://example.com/terms/",
        "contact": {
            "name": "API Support",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT License",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/equipment": {
            "get": {
                "description": "Retrieve a list of all available equipment",
                "produces": [
                    "application/json"
                ],
                "summary": "Get All Equipment",
                "operationId": "get-all-equipment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT authorization token",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of equipment",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Equipment"
                            }
                        }
                    },
                    "401": {
                        "description": "JWT token missing or invalid",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve equipment",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new equipment item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create Equipment",
                "operationId": "create-equipment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT authorization token",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Equipment details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateEquipmentRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Equipment created successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to create equipment",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/equipment/{id}": {
            "put": {
                "description": "Update an existing equipment item by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update Equipment",
                "operationId": "update-equipment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT authorization token",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Equipment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated equipment details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateEquipmentRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Equipment updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Equipment not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to update equipment",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing equipment item by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Delete Equipment",
                "operationId": "delete-equipment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT authorization token",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Equipment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Equipment deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Equipment not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to delete equipment",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Login with the provided email and password to obtain an authentication token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Login",
                "operationId": "login-user",
                "parameters": [
                    {
                        "description": "User login request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RegisterRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid email or password",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to generate JWT token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register a new user with the provided email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Register a new user",
                "operationId": "register-user",
                "parameters": [
                    {
                        "description": "User registration request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RegisterRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User registered successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to hash password\" \"Failed to create user\" \"Failed to send registration email",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/rental": {
            "get": {
                "description": "Get a list of all rental history records",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get All Rental History",
                "operationId": "get-all-rental-history",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT authorization token",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of rental history records",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.RentalHistory"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve rental history",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new rental history record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create Rental History",
                "operationId": "create-rental-history",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT authorization token",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Request body containing rental history information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateRentalHistoryRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rental history record created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "402": {
                        "description": "Insufficient deposit amount",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User or equipment not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Equipment is not available for rent",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to create rental history",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/rental/{id}": {
            "put": {
                "description": "Update an existing rental history record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update Rental History",
                "operationId": "update-rental-history",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT authorization token",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Rental history ID to be updated",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing updated rental history information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateRentalHistoryRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rental history updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Rental history not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to update rental history",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a rental history record by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Delete Rental History",
                "operationId": "delete-rental-history",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT authorization token",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Rental history ID to be deleted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rental history deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Rental history not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to delete rental history",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/top-up": {
            "post": {
                "description": "Deposit a specified amount into the user's account balance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Top-Up User Account",
                "operationId": "top-up-user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT authorization token",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Amount to deposit",
                        "name": "deposit_amount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.TopUpRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Top-up successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "JWT token missing or invalid",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to perform top-up\" \"Failed to send top-up email",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.CreateEquipmentRequestBody": {
            "type": "object",
            "properties": {
                "availability": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "rental_costs": {
                    "type": "number"
                }
            }
        },
        "model.CreateRentalHistoryRequestBody": {
            "type": "object",
            "properties": {
                "equipment_id": {
                    "type": "integer"
                },
                "rental_date": {
                    "type": "string"
                },
                "rental_status": {
                    "type": "string"
                },
                "return_date": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.Equipment": {
            "type": "object",
            "properties": {
                "availability": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "equipmentID": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "rentalCosts": {
                    "type": "number"
                }
            }
        },
        "model.RegisterRequestBody": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "model.RentalHistory": {
            "type": "object",
            "properties": {
                "equipmentID": {
                    "type": "integer"
                },
                "rentalDate": {
                    "type": "string"
                },
                "rentalHistoryID": {
                    "type": "integer"
                },
                "rentalStatus": {
                    "type": "string"
                },
                "returnDate": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "model.TopUpRequestBody": {
            "type": "object",
            "properties": {
                "deposit_amount": {
                    "type": "number"
                }
            }
        },
        "model.UpdateEquipmentRequestBody": {
            "type": "object",
            "properties": {
                "availability": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "rental_costs": {
                    "type": "number"
                }
            }
        },
        "model.UpdateRentalHistoryRequestBody": {
            "type": "object",
            "properties": {
                "equipment_id": {
                    "type": "integer"
                },
                "rental_date": {
                    "type": "string"
                },
                "rental_status": {
                    "type": "string"
                },
                "return_date": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Manufacturer Go API",
	Description:      "This is the Manufacturer Go API for managing equipment, users, and rental history.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
